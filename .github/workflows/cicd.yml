name: Deploy to AWS EC2 using Docker Compose

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: gyueon/what2eat
  EC2_HOST: ${{ secrets.EC2_URL }}
  EC2_SSH_USER: ubuntu
  PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  CONTAINER_NAME: what2eat

jobs:
  #job1
  build-and-push-docker:

    # runner
    runs-on: ubuntu-latest

    # step
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3 # action
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Login to Docker Hub using Access Token
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  # job2
  deploy-to-ec2:

    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          cat <<EOF > .env
          ${{ secrets.ENV }}
          EOF

      - name: SCP .env file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          key: ${{ env.PRIVATE_KEY }}
          source: ".env"
          target: "/home/ubuntu/secrets"

      - name: SCP docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          key: ${{ env.PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/"

      - name: Deploy to EC2 using Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          port: 22
          key: ${{ env.PRIVATE_KEY }}
          script: |
            cd /home/ubuntu

            # 최신 Spring 이미지 pull
            sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}

            # Compose up (기존 컨테이너 자동 정리 및 재시작)
            sudo docker compose --env-file ./secrets/.env up -d

#            CONTAINER_ID=$(sudo docker ps -aq -f name=${{ env.CONTAINER_NAME }})
#
#            if [ ! -z "$CONTAINER_ID" ]; then
#              sudo docker stop $CONTAINER_ID
#              sudo docker rm $CONTAINER_ID
#            fi
#
#            IMAGE_ID=$(sudo docker images -q ${{ env.DOCKER_IMAGE_NAME }})
#
#            if [ ! -z "$IMAGE_ID" ]; then
#              sudo docker rmi $IMAGE_ID
#            fi
#
#            sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}
#
#            sudo docker run --name ${{ env.CONTAINER_NAME }} \
#              -d \
#              -p 8080:8080 \
#              --env-file /home/ubuntu/secrets/.env \
#              ${{ env.DOCKER_IMAGE_NAME }}